---
#######################################################
###### Sulzer Start ###################################
#######################################################

- hosts: all
  become: yes
  any_errors_fatal: yes
  roles:
    - custom_features/host_preperations
  tags:
    - host_prep
   
#######################################################
###### Sulzer Stop ####################################
#######################################################

- name: Check ansible version
  import_playbook: ansible_version.yml

- hosts: all
  gather_facts: false
  tags: always
  tasks:
    - name: "Set up proxy environment"
      set_fact:
        proxy_env:
          http_proxy: "{{ http_proxy | default ('') }}"
          HTTP_PROXY: "{{ http_proxy | default ('') }}"
          https_proxy: "{{ https_proxy | default ('') }}"
          HTTPS_PROXY: "{{ https_proxy | default ('') }}"
          no_proxy: "{{ no_proxy | default ('') }}"
          NO_PROXY: "{{ no_proxy | default ('') }}"
      no_log: true

- hosts: bastion[0]
  gather_facts: False
  roles:
    - { role: kubespray-defaults }
    - { role: bastion-ssh-config, tags: ["localhost", "bastion"] }

- hosts: k8s-cluster:etcd
  strategy: linear
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  gather_facts: false
  roles:
    - { role: kubespray-defaults }
    - { role: bootstrap-os, tags: bootstrap-os}

- name: Gather facts
  tags: always
  import_playbook: facts.yml

- hosts: k8s-cluster:etcd
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/preinstall, tags: preinstall }
    - { role: "container-engine", tags: "container-engine", when: deploy_container_engine|default(true) }
    - { role: download, tags: download, when: "not skip_downloads" }
  environment: "{{ proxy_env }}"

- hosts: etcd
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - role: etcd
      tags: etcd
      vars:
        etcd_cluster_setup: true
        etcd_events_cluster_setup: "{{ etcd_events_cluster_enabled }}"
      when: not etcd_kubeadm_enabled| default(false)

- hosts: k8s-cluster
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - role: etcd
      tags: etcd
      vars:
        etcd_cluster_setup: false
        etcd_events_cluster_setup: false
      when: not etcd_kubeadm_enabled| default(false)

- hosts: k8s-cluster
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/node, tags: node }
  environment: "{{ proxy_env }}"

- hosts: kube-master
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/master, tags: master }
    - { role: kubernetes/client, tags: client }
    - { role: kubernetes-apps/cluster_roles, tags: cluster-roles }

- hosts: k8s-cluster
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/kubeadm, tags: kubeadm}
    - { role: network_plugin, tags: network }
    - { role: kubernetes/node-label, tags: node-label }

- hosts: calico-rr
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: network_plugin/calico/rr, tags: ['network', 'calico_rr'] }

- hosts: kube-master[0]
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes-apps/rotate_tokens, tags: rotate_tokens, when: "secret_changed|default(false)" }
    - { role: win_nodes/kubernetes_patch, tags: ["master", "win_nodes"] }

- hosts: kube-master
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes-apps/external_cloud_controller, tags: external-cloud-controller }
    - { role: kubernetes-apps/network_plugin, tags: network }
    - { role: kubernetes-apps/policy_controller, tags: policy-controller }
    - { role: kubernetes-apps/ingress_controller, tags: ingress-controller }
    - { role: kubernetes-apps/external_provisioner, tags: external-provisioner }

- hosts: kube-master
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes-apps, tags: apps }
  environment: "{{ proxy_env }}"

- hosts: k8s-cluster
  gather_facts: False
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  roles:
    - { role: kubespray-defaults }
    - { role: kubernetes/preinstall, when: "dns_mode != 'none' and resolvconf_mode == 'host_resolvconf'", tags: resolvconf, dns_late: true }


#######################################################
###### Sulzer Start ###################################
#######################################################
- hosts: all
  become: yes
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tags:
  - post_install_tasks
  tasks:
  - name: Set cni0 to trusted zone of firewalld
    firewalld:
      interface : "cni0"
      zone: trusted
      state: enabled
      permanent: true
      immediate: yes
    when: ansible_os_family == "RedHat" 

  - name: Set cni0 to allow for inbound
    ufw:
      rule: allow
      interface: "cni0"
      direction: in
    when: ansible_os_family == "Debian"


- hosts: kube-master
  become: yes
  any_errors_fatal: "{{ any_errors_fatal | default(true) }}"
  tags:
  - post_install_tasks
  tasks:
  - name: Make kubectl and kubeconf accessible
    shell: "{{ item }}"
    with_items:
    - "cp -r /root/.kube /home/{{ansible_user}}"
    - "chown -R {{ansible_user}}:{{ansible_user}} /home/{{ansible_user}}/.kube"
    - "ln -fs /usr/local/bin/kubectl /usr/bin/kubectl"

  - name: get the username running the deploy
    become: false
    shell: whoami
    delegate_to: localhost
    register: username_on_the_host

  - name: create dir if not present
    become: false
    shell: "mkdir -p /home/{{username_on_the_host.stdout}}/.kube"
    delegate_to: localhost

  - name: get config file
    fetch:
      src: "/home/{{ansible_user}}/.kube/config"
      dest: "/home/{{username_on_the_host.stdout}}/.kube/config_{{ deployment.name | default('config_last') }}"
      flat: yes
    run_once: yes
  
- hosts: all
  become: yes
  serial: 1
  tags:
  - post_install_tasks
  - selinux_enforcing
  tasks:
    - name: set selinux to permissive for installation time
      block:
      - name: build and load policy
        shell: "/home/{{ansible_user}}/sepolicies/kubernetes/kubernetes.sh"
    
      - name: Install rpm (pp-file, policy manual and interface)
        shell: "rpm -ivh --force /home/{{ansible_user}}/sepolicies/kubernetes/noarch/*.rpm"
      
      when: ansible_os_family == "RedHat"
    - name: Set SELinux enforcing
      selinux:
        state: enforcing
        policy: targeted
      register: selinux_postinstall

    - name: Reboot machine
      reboot:
        connect_timeout: 10
        reboot_timeout: 600
      when: selinux_postinstall.reboot_required

    - name: Ensure SELinux is set to enforcing
      selinux:
        state: enforcing
        policy: targeted

#######################################################
###### Sulzer Stop  ###################################
#######################################################